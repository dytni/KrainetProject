version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bd
      POSTGRES_USER: dytni
      POSTGRES_PASSWORD: 1331
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dytni -d bd"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 10s
      retries: 6
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://host.docker.internal:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: >
        bash -c '
          exec kafka-broker-api-versions.sh --bootstrap-server kafka:9093 > /dev/null 2>&1
        '
      interval: 15s
      timeout: 10s
      retries: 6
      start_period: 60s

  user-service:
    build:
      context: ./AUTH
      dockerfile: Dockerfile
    image: user-service:latest
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bd
      SPRING_DATASOURCE_USERNAME: dytni
      SPRING_DATASOURCE_PASSWORD: 1331
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network

  notification-service:
    build:
      context: ./Notification
      dockerfile: Dockerfile
    image: notification-service:latest
    ports:
      - "8000:8000"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bd
      SPRING_DATASOURCE_USERNAME: dytni
      SPRING_DATASOURCE_PASSWORD: 1331
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network


volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge